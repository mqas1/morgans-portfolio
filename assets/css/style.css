/* Variable selectors for colours and often used styles. */
:root {
    --pizazz: #f8efe7;
    --iron: #D1D7DB;
    --martinique: #362444;
    --screaming-green: #39FD6D;
    --martinique-border: 2.5px solid #362444;
    --screamin-green-border: 3px solid #39FD6D;
}
/* Element selectors. */
body {
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    background-color: var(--iron);
    color: var(--martinique);
}

h1 {
    font-size: 36px;
    font-weight: 500;
}

h2 {
    font-size: 24px;
    font-weight: 500;
}

main h1 {
    margin-left: 6rem;
    position: relative;
    display: flex;
    text-align: end;
}

h1 ul li {
    position: relative;
    text-align: end;
}

article {
    display: flex;
}

p {
    font-size: 14px;
    line-height: 1.5;
    padding: 0 0.5rem 1rem 2rem;
    margin-right: 3rem;
}

header {
    height: 65px;
    width: 100%;
    background-color: var(--martinique);
    margin-top: -1.3rem;
}

header h1 {
    background-color: var(--screaming-green);
    display: flex;
    position: absolute;
    padding: 0.25rem 0.5rem 0.25rem 3rem;
    margin: 0.65rem 0rem;
}

nav {
    margin: 1.25rem 4.5rem;
    padding-top: 1.5rem;
    display: flex;
    justify-content: flex-end;
    position: relative;
}

nav a {
    text-decoration: underline;
    text-underline-offset: 0.25rem;
    color: var(--screaming-green);
    padding: 0.25rem;
}

footer {
    background: var(--iron);
    height: 65px;
    margin-top: 3.25rem;
}

/* Class selectors and the odd ID selector. */
.hero{
    height:150px;
    width: 100%;
    margin-bottom: -1rem;
    background-image: url(../images/image-1.jpeg);
    background-size: cover;
    background-position: top;
}

.hero-subtitle {
    position: relative;
    background-color: var(--screaming-green);
    padding: 0.5rem 0.5rem;
    margin: 6.5rem 5rem 0rem;
}
/* This was the hardest part of the project for me.
I first used flex divs of cards inside the work section attempting to use flex grow and shrink to arrange them.
This didn't get any desired results. Just positioning the boxes in a responsive way. 
I then attempted to use a grid display and that was starting to take shape.
I used AskBCS to get further assistance in styling and instead I switched back to using flex boxes.
Beau in AskBCS was of great assistance in pointing me in the right direction in using the row class selectors to get the rudimentary layout. */
.container-work {
    display: flex;
    flex-direction: column;
}

.card {
    flex: 1;
    margin: 0rem 1rem 1rem 2rem;
    border: 3px solid var(--screaming-green);
}

.card-column2 {
    margin-left: -0.15rem;
}

.row-1 {
    display:flex;
}

.row-2 {
    display:flex;
}

.row-3 {
    display:flex;
}

.image-leading {
    display: flex;
    flex: 1 1 0;
    height: 250px;
    width: 670px;
    opacity: 25%;
}

.image {
    display: flex;
    flex: 1 1 0;
    height: 100px;
    width: 325px;
    opacity: 25%;
}

.card-header {
    background-color: var(--screaming-green);
    position: absolute;
    margin: -5rem 0.01rem 2rem;
    padding: 0.5rem;
}

.card-header h3 {
    padding-top: 0.5rem;
    font-size: 14px;
    font-weight:400;
} 

.card:hover {
    background: var(--pizazz);
}

#contact-style {
    /* display:flex;
    justify-content: space-between; */
    margin: 2rem 5rem;
    margin-right: 3rem;
    padding-left: 1rem;
}

.contact a {
    text-decoration: none;
    color: var(--martinique);
    border-bottom: 2px solid var(--martinique);
    padding: 0.25rem;
    line-height: 1.5;
}

.float-left {
    float: left;
}

.float-right {
    float: right;
}

/* media queries */
@media screen and (max-width: 768px) {
    header{
        height: 150px;
    }

    main h1,
    .work-h1,
    #contact-h1 {
        flex-direction: column;
        flex-wrap: wrap;
    }

    main h1 {
        float:left;
        margin-left: 0;
    }

    nav {
        flex-wrap: wrap;
        justify-content: space-between;
        padding-top: 5rem;

    }

    .hero {
        margin-bottom: 1rem;
    }

    .container-work{
        padding-top: 1rem;
        justify-content: center;
        align-items: center;
        flex-wrap: wrap;
    }

    #contact-style {
        padding-left: 5rem;
    }
}

@media screen and (min-width: 992px) {
    main h1,
    .work-h1,
    #contact-h1 {
        float: left;
    }

    article {
        padding-left: 0.6rem;
        margin: 2.5rem 1rem;
    }

    /* My approach to the side bar was to use headings rather than an aside
as I couldn't get my head around matching up the contents with the main
section. I used a series of left and right borders for the styling.

I then put them in media queries to make the layout more responsive and
to get around the wonky design when the browser was made smaller.*/

    p {
        border-left: var(--martinique-border);
    }

    .work {
        border-left: var(--martinique-border);
        margin: 0 3rem 1.5rem;
    }
    
    .work-h1 {
        margin-right: 1.5rem;
        padding-right: -1rem;
    }

    #contact-h1 {
        border-right: var(--martinique-border);
        padding-right: 0.5rem;
        margin-left: auto;
        padding-left: 4.2rem;
    }
    
    .contact ul li {
        display: inline;
        text-align: center;
        padding-left: 1rem;
    }

    #contact-style {
        display:flex;
        justify-content: space-between;
    }

    .contact a{
        margin-top: 1rem;
    }
}
